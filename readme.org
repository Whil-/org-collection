#+TITLE: Org collections readme
* Introduction
* Goals
The goal is to wrap org-mode customizations into collections, or
project if you will, to encourage a more modularized way of thinking
and to help Org grow up a bit. Org should be less tied to emacs and by
lifting customizations out from emacs into their own collections one
step on the journey is taken. See more about motivation here:
- [[id:20200729T125620.588871][Initial pitch]]

Taking away the global mindset leaves something missing in between the
whole of emacs and a singluar Org mode file. This whole is intended to
be filled with the concept of an Org collection.

The statements above lead to a couple of principles:
- Rely as little as possible on global configurations.
- Make org collection configuration depend as little on Emacs as
  possible.

* List of Org parameters with collection defaults
It makes sense for some parameters to have defaults other than the
"global" defaults that can be configured in the emacs initailization.

These parameters all have customizations within Org collection with
prefixes =org-collection-default=. Setting any of these parameters
shall deactivate the org collection default which means that the
parameters will fall back on either any global user customization or
the Org mode default.

Parameters relying on a filesystem path should by default be set to be
relative to the active org collection path:
- org-directory
- org-id-locations-file
-

Some other parameters that makes sense to switch from the otherwise
default Org mode default when in Org collection mode:
- org-id-track-globally (enforce it, maybe with an override option)
-

* Initial pitch
:PROPERTIES:
:ID:       20200729T125620.588871
:END:
This pitch was sent to the Org mode mailinglist [2019-12-14 Sat]:
- https://lists.gnu.org/archive/html/emacs-orgmode/2019-12/msg00215.html

** Motivation
Org mode is more than a major mode for emacs buffers. That has been
clear for quite some time. Org mode can operate on sets of files.
Consolidate TODO's and calendar information into custom views. Publish
sets of files. To do this Org mode assumes that the user has a
configuration for each of those features. Each feature is responsible
for maintaining its own context. And almost all of that context has to
be set globally. So even though Org mode has commands and features
that operate on sets of files and folders it has not yet developed
that in a congruent, extensible and composable way. Thus, for the
sanity of our users and developers I think it's time to ... introduce
another concept! One that hopefully can simplify things both for users
and developers.

** Idea
I propose to introduce =Org Collection= as a concept in the realm of
Org mode. [fn:2]

An Org mode collection is defined as the combination of:
1. A short name and description
2. A collection of Org mode documents
3. A collection of files and/or folders called attachments and
   attachment-locations for the project
4. A collection of configurations for the given project

Globally available collections are defined in a list,
=org-collections=. Org mode should include a safe parameter that can
be set as a folder customization to the local active project,
=org-collections-active=. The default should be to the first entry in
=org-collections= unless customized. This local parameter would be
used to instruct Emacs and Org mode on which collection is active.
Only one collection at a time can be active.

Org agenda should use =org-collections-active= as default for the
collection of Org mode documents to operate on. Org agenda should get
a new command to switch between active projects.

I'm thinking that there could be a special Emacs major mode for the
collection as well, called "Org collections mode". Not sure exactly
what to display and how to represent the project there... But
certainly some kind of list of included documents and attachments.
When in that mode there should possibly be single key
keyboard-shortcuts to the most important features that operate on the
collection. And switch between them.

[fn:2] I've previously written about this as "Projects". While Project
was my initial name for this feature I think collection may be a
better option. For the sake of this text both options work just fine.
The idea is the same.

** Benefit
*** For the user
A user would gain mainly two benefits as I can see right now:
1. The ability to clearly define (multiple) collections of files that
   belong together across org mode, with unique configurations.
2. Less global configuration state to manage and worry about!

The second point might not look like much but is sooo important! Most
programmers know that global state should be avoided. Putting things
in a context most of the time makes things better. And if we can
configure Org mode connected to a context it makes it much more useful
for those who use Org mode for multiple purposes.

The first point is equally important in my opinion. Today one must
configure Org mode per feature. If you want to configure publishing
you do that globally. If you want to configure the agenda, you have to
do that globally as well. If you want to define a location for
attachments, do it globally! What about custom TODO-keywords? Do it
globally! Track ID-locations? Define a location globally!

All above adds cognitive load to the user and makes it difficult to
maintain the configuration as the use of Org mode grows (as it should
;) ). You have to define the context for each and every feature for it
to know what to operate on. I claim that both the human psyche and the
system itself will have a much more easy time if it could configure
these features together, in a given context!

*** For the developer
I claim there will be benefits for developers as well. Today there
exists many packages that extend Org mode functionality. Many work
with the idea of collections. Some that come to mind:
- Org brain (https://github.com/Kungsgeten/org-brain)
- Org ql (https://github.com/alphapapa/org-ql)
- Org Roam (https://github.com/org-roam/org-roam)
- Zetteldeft (https://github.com/EFLS/zetteldeft)
- Org zettelkasten (https://github.com/l3kn/org-zettelkasten)
- Ox hugo (https://ox-hugo.scripter.co/)

I think that with the addition of the =collections= concept into Org
mode, package developers get a concept they can easily attach to. Yes,
you can easily define your own package-specific concept for that as
well. But then the user loses out in having to configure another
feature. And yes, today you as a developer can say that Org agenda
will be my collection to operate on. But this is a big limitation
since it limits what your package effectively can only work to a
single list of files.

Having a collections concept means you as a developer have another
base on which you can extend. No need to define your own concept if
=Org-agenda-files= isn't enough; make it work together with
=org-collections= instead. Org mode users will be happy because what
they have already defined as important for them can be reused for new
things with ease.

Developing features inside Org mode itself hopefully also can benefit
from this concept. I'm sure there are many people out there with cool
ideas on how to extend and work with Org documents. And I'm equally
sure that the value of developing many of those features will be
bigger if they could naturally attach to an Org collections
definition!

** Example use cases
*** Separate actions from reference
One practice promoted by GTD is to separate actionable items from
reference information. While that practice can be overcome by search
etc. some might still value a clear separation.

Want to look up something related to my general references? Search the
Org collection related to reference-information! Maybe set up custom
views and uses of TODO keywords for reference information for special
agenda views.

Want to only display not yet finished tasks? Switch to the Org
collection for actionable items and browse away.

*** Work / Personal separation
The heading says it all. Some like to separate work and personal stuff
out from each other. What more clear way to do that than can there be
than to separate them into their own Org collections? That way you
potentially could let your work-related workflow (I.e. TODO-keywords)
be different than the personal workflow. Without having to think about
a global configuration that has to allow for both.

*** Separated book library
Org mode can be used as a media manager of sort. Just define your
conventions for the Org collection using TODO-keywords, categories and
properties. Attach the e-books you have as attachments in an
attachment-scheme special for your book library. Configure export of
the library using maybe a custom HTML/CSS-visual and publish it
somewhere for yourself to look at when on your phone. And do this
without having to think of how changing all these things will affect
the global state of Org mode, potentially messing up your other uses
for task management or other notes and libraries you're trying to
manage!

Note that one can still have a holistic view on all Org mode documents
as well, if important. It only requires a definition of a collection
as the collection of all other collections!

*** More?
Please add more ideas when you think of them!

** Risks and challenges
*** Which configuration to use?
When I'm visiting a file that belongs to a collection, how should
Emacs resolve configurations for that file?

There may be configurations in the following places:
- Global in =emacs-custom.el= or =.emacs.d/init.el=
- Directory local variables in the tree
- File local variables
- Local variables for the project definition in which the file
  belongs?

Should visiting a file always have to scan the collections list to see
if the file belongs to any of them, in order to load customizations?
Hmm... Maybe!? Or - maybe not if Emacs can rely on the fact that the
user cares to set the local variable =org-collections-active= (or
whatever it should be called)? In that case, just evaluate the
settings for that project without doing any scan.

*** Should project config allow local variables?
Should the collections definition allow customization of variables
that apply for Org mode features? Hmm... Maybe!? One thing that comes
to mind is that a project should be able to define a custom attachment
directory... How else would the attachment-feature know what
attachment directory to use for files in that collection?

Another option could ofc. be that each feature would have to add
support for looking into the collection definition and override the
local variable. But that will add development effort and complexity to
each feature. Not suggested.

**** How to initialize the local variables?
When visiting a file that belongs to a collection, should Emacs at
that point initialize the collection-configuration for that
collection? Ideally some kind of collection-resolution would be made.
Otherwise users will get strange behaviors when the think they are in
one project but Org mode hasn't changed the local variables to match
it. On the other hand, it doesn't sound very performant to have to
check collection-belonging every time an Org mode file is visited!

Possibly solve this with a variable that can be localized -
=org-collections-active=?

*** Conflict with other customizations
Maybe I've defined an attachment directory as a directory local
variables in a folder, for all subfolders and files to inherit. Should
collection-customizations override that? Or should the directory local
variables take precedence?

Maybe could be solved by letting the (advanced) user choose using a
customization itself, something like
=org-collections-precede-local-variables= ? Need a intuitive default
though. Most sane default is probably to let local variables take
precedence. Those are created by the user anyways, so she should be
aware.

The more I think of it, there shouldn't be a customization for this at
all. I think local definitions always should override the collection
definition.

*** Files that belong to multiple collections
What if I'm being a clever user and define multiple collections for
the same files (I.e. overlap in the Venn-diagram of files grouped by
collections). Which collection is "active" when I'm visiting the file?

This depends on if Emacs should evaluate the collection-settings for
each file visit or not. If they are evaluated for each file visit then
the first matching project in the list of collections should apply for
that file. If a cache is created that lists file and collection
relationships then each file should relate to a list of collections
where the first collection in that list should apply.

If Emacs can rely on =org-collections-active= being set, then the
collection referenced there should be used.

*** Dynamic lists of files and folders for a collection?
Should the list of files allow for folders with recursion and patterns
should it be required to provide a fixed defined list of files?

Preferably the same way as =org-agenda-files= work today. Maybe some
kind of caching-mechanism is needed though, for commands that might
have to look for file, collection relations. A cache adds potential
pain for the user though. If a file is added to a folder in a
collection and a "collection-command" is run then the new file might not
show up in the results anyway... So the user will be affected by
caching and will have to know about it. Not good...

** Alternatives
Doing research for this feature made me realize that much of what I'm
proposing already exist! In another form though, as [[info:emacs#Directory variables][directory
variables]]. That requires customizations to be defined as safe though.
And today some of the things I would consider to define a collection
aren't safe. For example =org-agenda-files=, =org-todo-keywords=,
=org-publish-project-alist=.

Some issues with relying on directory variables (Assuming they also
are made safe):
- When invoking Org agenda I will have to first visit a file inside a
  specific folder to get the agenda for the correct project
- ....

** References
I've mentioned this idea the Org mode mailing list previously, but
only as short side notes to other topics:
- https://lists.gnu.org/archive/html/emacs-orgmode/2018-11/msg00211.html
- https://lists.gnu.org/archive/html/emacs-orgmode/2019-09/msg00010.html

Note that I've talked about it as "project". I think that name still
could be considered instead of "collection". Collection is more
general and less overloaded in terms of productivity software. And it
shifts the focus away from task management a bit, which I think can be
a good thing. Because while Org mode may often start to be used as a
task/project manager software, it's useful in a much wider context
than that!

* Gustavs build-log
** [2020-06-20 Sat] An idea of implementation
Trying out various emacs configurations, such as doom emacs and radix
I've realized that I don't like the fact that Org mode configuration
is so tightly integrated with the emacs configuration. I think one
step for Org mode to transcend emacs is to allow it to be customized
on it's own. To not make life all too difficult for me initially, I
don't think going away from elisp is the way. Maybe further down the
road, with a yaml- or json-syntax for the config to make it less
implementation specific. But for now my idea still revolves around
elisp.

I would like to allow for folder specific configuration files, maybe
named =.org-config= or =.org-collection=. The idea is that such
configuration file would inject itself into the emacs initialization
based on a variable specifying if it should or should not be. Possibly
an emacs customization in the =org-collections= namespace to turn it
on, and then =org-collections= (as discussed above) would point out
the location of where to look for that =.org-collection= file.

The configuration file itself would allow any Org mode customization
to be set, but only Org mode customization. No other emacs
customization. I suppose the namespace should allow for =ol-= and
=ox-= prefixes as well since they sort of are a part of the org
namespace.

The configuration should take precedence over any global configuration
done in emacs customization. File local variables should probably
take precedence and possibly also directory local variable. I should
make sure that this =.org-collection= file doesn't require safe
variables to be used.

Either a function is provided to switch between active collections or
it is done based on =default-directory=.

A customization is needed to signal to emacs if =org-collection= is to
be used or not. The added overhead will be that emacs needs to look
for the =.org-collection= file. How often is determined by how
switching collections is triggered...

The configuration file should probably mimic directory variable files
pretty closely. I'm now thinking that the file should contain any
number of alists mapping variables to values where emacs proabably
only should set variables that it finds in the customization system.
It should probably allow regular elisp comments in the file as well.

Something like:

#+begin_src emacs-lisp
  ;; Main org collection customization
  ((org-directory . "./")
   (org-use-speed-commands . t)
   (org-todo-keywords . '((sequence "TODO" "DONE"))))

  ;; Agenda customizations
  ((org-agenda-files . "agenda.org"))
#+end_src

Some configurations, such as =org-directory=, should probably be set
by default if =.org-collection= exists in a folder that either is
visited or configured as the current default collection.

** [2020-07-27 Mon] Org-mode needs to be split up!
I have the sense that Org mode needs to be split up! It is really time
to separate Org mode into the specification, the data format and it's
customizations and the customizations of Emacs to work with that
specification and data format. Probably a feat to big to be done, but
it's really bothering me that it's not done.

Org currently consist of:
- A Specification of a file typ with a particular syntax.
- Editor configurations and functions for workin with those files.
- Configurations and functions for exporting those files.
- Auxiliary modes to filter and present information in Org files.

Org currently lacks:
- A concept of grouping files together into collections in a
  composable way.

  The specification for grouping of files is important for certain
  features to work better when thinking outside of the scope of a
  single file.

How would it be split up if it were to be more sensible?

** [2020-07-27 Mon] Use emacs project!?
Take inspiration from, and make use of, the project functionality of
Emacs! That should really be the guiding star in this work. Try to
emulate how EDE looks like and works.

That means some designs are already decided:
- A project is simply a directory root.
- =default-directory= determines the current project.
- A customization for list of project directories,
  =org-project-directories=.
- Project files in the root of projects on a format similar to
  (example from EDE):
  #+begin_src emacs-lisp
    (ede-proj-project "EDE testproject"
      :file "Project.ede"
      :name "EDE testproject"
      :targets nil
      :object-name "EDE testproject"
      :makefile-type Makefile\.am)
  #+end_src
- The hook =project-find-functions= needs to be used for determining
  if the file belongs to a project or not. Similar to:
  #+begin_src emacs-lisp
    (add-hook 'project-find-functions #'project-try-ede)
  #+end_src

I should then make the switch, or at least the extension for things in
Org to be based on this project definition to work. Notably:
- Org agenda
- Org id
- Org export

** [2020-08-07 Fri] Set things buffer-local vs global
I have to be pragmatic here. Org mode relies on global configurations
quite a lot, and before Org collection is integrated well within Org
mode things will need to be set globally. Maybe it's not bad in
itself... But I would like to have as a principle to try to keep
things as local as possible. If possible. But not to bend my back over
to make it work.

** [2020-08-08 Sat] Structure, etc.
*** Global minor mode
The module will create a global minor mode that can be used to enable
org collection functionality.

Determining if org-collection customizations are active is done
primarily based on two variables:
- org-collection-global
- org-collection-local (buffer local)

When these are both set org-collection events shall not run any code
(except checking if those variables are set...).

Since this minor mode will modify some global Org mode variables only
one collection can be "active" at any time. Switching between
collections is automatic and based on =default-directory=.

The minor mode should ideally be able to consider the filesystem
hierarchy and enable the collection also for subfolders within a
collection. I.e partial matches on =default-directory= that finds the
special collection file are also valid. The "longeset" match on
default-directory is preferred.

*** Entrypoints
- When global minor mode is on:
  - Activation of collection is event-driven by a 'maybe try
    collection activation' event when a file is opened or buffer
    activated.
  - Org collection can be refreshed with special function
    =org-collection-refresh=. This refresh shall reset variable
    =org-collection-local= to nil for all buffers where it's set and
    re-trigger the 'maybe try collection activation event' on active
    buffer. Other buffers will be activated again by the event.
- When global minor mode if off:
  - Nothing

Determining if org-collection customizations are active is done
primarily based on two variables:
- org-collection-global
- org-collection-local (buffer local)
- org-collection-cached (buffer local)

These variables also act as a cache of sort. When set, org-collection
events shall not run any code (except checking if those variables are
set...). Org-collection-cached is used in all visited buffers as a
signal to the hook for it to know to not scan it again for a
collection.

*** Hooks
Which hooks to use then?

It seems =buffer-list-update-hook= is the only option if I want this
to be as intrusive as running each time a buffer is selected.
The buffer list is resorted each time a switch between buffers is
made, so that the selected buffer is highest in the list of buffers.
This is not perfect as the name of the hook isn't explicitly about
triggering when a buffer is selected. But it seems what Emacs has come
up with so far.

Using this hook should mean no other hook is needed. When a file is
opened it will create a buffer that should trigger the
=buffer-list-update-hook= mentioned above.

*** Turning global minor mode on
- Enables events (by hooks)
- Looks in current buffer and enables a collection as if a 'maybe try
  collection activation' event was triggered.

*** Turning global minor mode off
- Removes events (hooks)
- Removes org-collection customization globally and in all open buffers

*** Switching between collections
Switching between collections should be done when a buffer is visited
that has a collection attached to it that is different than the global
collection.

The switch is really only related to switching the parameters that
requires global configuration. Thus it should be enough to check that
the global and local configs are different.

Note that this should be done even if the buffer-cache says the buffer
has already been visited! The same event that deals with everything
else needs to deal also with this.
- If the buffer is cached then it's already been loaded and an
  equality-check between =oc-global= and =oc-local= needs to be made
  to determine if a global switch is needed or not.
- If the buffer isn't cached then the local settings needs to apply
  anyhow, and maybe it's easier to also set globals at that point,
  even if it's already set? Can revise later if needed.

*** Force reload of Org
...might be needed, since a refresh of org config when triggered here
might be after Org mode was set for the buffer...

...there is the function =org-mode-restart=. Sounds not to bad.
Probably not that performant though, but this should only run when a
buffer either initializes a collection or is opened the first time.

*** Misc

Removed the following:
: (interactive (list (org-completing-read "Set collection: " org-collection-list)))

May be useful in separate function later on.

* TODO Figure out how org-collection-reset should look like

* Custom file link
** Idea
Would be cool to be able to create links between collections based on
collection name and note ID's.
